class Solution:
    def minSideJumps(self, obstacles: List[int]) -> int:
        def solve(self,arr,n,i,lane,dp):
            if i==n-1:
                dp[i][lane]=0
                return dp[i][lane]
            if dp[i][lane]!=-1:
                return dp[i][lane]
            if arr[i+1]!=lane:
                dp[i][lane]=solve(self,arr,n,i+1,lane,dp)
                return dp[i][lane]
            one,two,three=10**10,10**10,10**10
            if lane==2:
                if arr[i]!=3:
                    three=1+solve(self,arr,n,i+1,3,dp)
                if arr[i]!=1:
                    one=1+solve(self,arr,n,i+1,1,dp)
                    
            elif lane==3:
                if arr[i]!=2:
                    two=1+solve(self,arr,n,i+1,2,dp)
                if arr[i]!=1:
                    one=1+solve(self,arr,n,i+1,1,dp)
                    
            elif lane==1:
                if arr[i]!=2:
                    two=1+solve(self,arr,n,i+1,2,dp)
                if arr[i]!=3:
                    three=1+solve(self,arr,n,i+1,3,dp)
                    
            dp[i][lane]=min(one,min(two,three))
            return dp[i][lane]
        n=len(obstacles)
        dp=[[-1 for i in range(4)]for j in range(n+1)]
        return solve(self,obstacles,n,0,2,dp)
